import lara.Io;
import lara.code.Timer;
import lara.util.Replacer;
import lara.Strings;
import lara.cmake.CMaker;
import lara.util.ProcessExecutor;

import clava.Clava;

import weaver.WeaverOptions;

import lat.LatVar;
import lat.LatVarList;
import lat.LatVarRange;
import lat.LatVarOmp;
import lat.LatConst;
import lat.LatUtils;
import lat.LatReport;

import aspects.variableHelpers;

var Lat = function(name, scope, variables, measure, searchType, numTests, removeDuplicates, clearCode, verbose, abort, timeout, outputFolder) {
    this.loadDefaults(name, scope, variables, measure, searchType, numTests, removeDuplicates, clearCode, verbose, abort, timeout, outputFolder);
    this._tunned = false; /** set to true after a tuning execution, used to block functions that require tune, such as printResults */
    this._printIndentation = 0; /** indicates the hierarchy level of the print operations */
    this._tuneCounts = 0; /** at each tuning operation the name that is output is changed automatically so that there is no confusion between diferent tuning operations */
    this.results = undefined; /** This variable will hold the results of each parseResults operation */
    WeaverOptions.setVerboseLevel(0); /** 0 to 3, increasing the verbosity */
    //get current file
    call callFile: getFile();
    this.file = callFile.thisFile;
    this.cmaker = undefined;
	this.executionFlags = "";
};

Lat.prototype.tune = function() {
    this.restartPrintLog();
    this.print("Starting tuning operation").pushIndent();
    this._tunned = false;
    this._duration = System.nanos(); //tune start time, duration will be calculated later

    //check cmake options
    this.checkCmakerOptions();

    if (this.searchType === LatConst.SEARCH_TYPE.DEPENDENT || this.searchType === LatConst.SEARCH_TYPE.INDEPENDENT) {
        this.variables = LatUtils.removeDuplicates(this.variables);
    }
    this.generateSearchGroups();
    this.generateUniqueVariables();
    this.generateBaseVariant(); //must come after generateUniqueVariables
    this.generateUniqueVariants();
    if(this.uniqueVariants == 0){
        LatUtils._warn("No variant to test, add variables or searchGroups before calling .tune()");
        return;
    }


    this.checkVariablesInScope();
    if (Io.readFile(this._timerFile) == null) {
        Io.writeFile(this._timerFile, "\n"); //create the file if it does not exist
    }

    this.generateSourceCode();
    this.executeSourceCode();
    this.parseResults();

    this._duration = System.nanos() - this._duration;//must be before generateReport
    this.generateReport();

    this._tuneCounts++; //update the current index of the tuning operation after the report generation

    this._tunned = true;
    this.popIndent().print("Tuning operation complete");
};


Lat.prototype.toConfig = function(filename) {
    filename = LatUtils.getRightExtension(filename, "json");
    Io.writeJson(filename, this);
};

Lat.prototype.fromConfig = function(filename) {
    LatUtils._error("function fromConfig not implemented, missing 'this[property]' access");
    var temp = Io.readJson(filename);
    for (var property in temp) {
        //println("property: " + property + " = " + temp[property]);
        //TODO: check it works after fixing this[property]
        //this[property] = temp[property];
    }
};

Lat.prototype.countVariants = function() {
    var count = 0;
    if (this.searchType == LatConst.SEARCH_TYPE.DEPENDENT) {
        //dependent search means for every var, every other's value will be used -> product
        count = 1;
        for (var i = 0; i < this.variables.length; i++) {
            count *= this.variables[i].countElements();
        }
    } else if (this.searchType == LatConst.SEARCH_TYPE.INDEPENDENT) {
        //independent search iterates a single variable while keeping all the others constant -> sum
        for (var i = 0; i < this.variables.length; i++) {
            count += this.variables[i].countElements();
        }
    } else if (this.searchType == LatConst.SEARCH_TYPE.CUSTOM) {
        //each search group acts as a dependent search, and between search groups the pattern is dependent
        for (var i = 0; i < this.searchGroups.length; i++) {
            var temp = 1;
            for (var j = 0; j < this.searchGroups[i].length; j++) {
                temp *= this.searchGroups[i][j].countElements();
            }
            count += temp;
        }
    }
    return count;
};

Lat.prototype.estimateTime = function() {
    LatUtils._error("function estimateTime not implemented");
};

//--------------------------------------------Setters

Lat.prototype.setName = function(name) {
    LatUtils.checkString(name, "name");
    name = name.toString();
    name = Strings.replacer(name, "[^a-z0-9]", "_").toLowerCase(); //replace to always make name with no special chars
    this.name = name;
    return this;
};
Lat.prototype.setScope = function(scope) {
    //TODO: validate joinpoint
    //LatUtils.checkJoinpoint(scope, "scope");
    this.scope = scope;
    if (this.measure === undefined) {
        this.measure = scope;
    }
    return this;
};
Lat.prototype.setMeasure = function(measure) {
    //LatUtils.checkJoinpoint(measure, "measure");
    this.measure = measure;
    return this;
};
Lat.prototype.setVariables = function(variables) {
    LatUtils.checkLatVars(variables, "variables");
    LatUtils.checkDuplicatesLatVar(variables, "variables");
    this.variables = variables;
    return this;
};
Lat.prototype.addVariable = function(latVar) {
    LatUtils.checkLatVar(latVar, "latVar in addVariable");
    LatUtils.checkDuplicateLatVar(this.variables, latVar, "variables");
    this.variables.push(latVar);
    return this;
};
Lat.prototype.setSearchGroups = function(searchGroups) {
    for (var i = 0; i < searchGroups.length; i++) {
        //checking for LatVar types
        LatUtils.checkLatVars(searchGroups[i], "searchGroups[" + i + "]");
        //checking for duplicate variables in searchgroups, not allowed
        var tempVars = [];
        for (var j = 0; j < searchGroups[i].length; j++) {
            LatUtils.checkDuplicateLatVar(tempVars, searchGroups[i][j], "searchGroups[" + i + "][" + j + "] (name: '" + searchGroups[i][j].name + "')");
            tempVars.push(searchGroups[i][j]);
        }
    }
    //all is ok
    this.searchGroups = searchGroups;
    this.searchType = LatConst.SEARCH_TYPE.CUSTOM;
    return this;
};
Lat.prototype.addSearchGroup = function(searchGroup) {
    var tempSearchGroups = this.searchGroups;
    tempSearchGroups.push(searchGroup);
    return this.setSearchGroups(tempSearchGroups);
};
Lat.prototype.setSearchType = function(searchType) {
    if (searchType !== LatConst.SEARCH_TYPE.INDEPENDENT && searchType !== LatConst.SEARCH_TYPE.DEPENDENT) {
        LatUtils._error("setSearchType only accepts LatConst.SEARCH_TYPE.INDEPENDENT and LatConst.SEARCH_TYPE.DEPENDENT, see the documentation on how to specify LatConst.SEARCH_TYPE.CUSTOM");
    }
    this.searchGroups = []; //will be generated when tune() is called
    this.searchType = searchType;
    return this;
};
Lat.prototype.setNumTests = function(numTests) {
    if (numTests <= 0) {
        LatUtils._error("numTests has to be an int greater or equal to 1, invalid value (" + numTests + ")");
    }
    this.numTests = numTests;
    return this;
};
Lat.prototype.setRemoveDuplicates = function(removeDuplicates) {
    LatUtils.checkBoolean(removeDuplicates, "removeDuplicates");
    this.removeDuplicates = removeDuplicates;
    return this;
};
Lat.prototype.setClearCode = function(clearCode) {
    LatUtils.checkBoolean(clearCode, "clearCode");
    this.clearCode = clearCode;
    return this;
};
Lat.prototype.setVerbose = function(verbose) {
    LatUtils.checkBoolean(verbose, "verbose");
    this.verbose = verbose;
    return this;
};
Lat.prototype.setExecutionFlags = function(executionFlags) {
    checkType(executionFlags, "string");
    this.executionFlags = executionFlags;
    return this;
};
Lat.prototype.setAbort = function(abort) {
    LatUtils.checkBoolean(abort, "abort");
    this.abort = abort;
    return this;
};
Lat.prototype.setTimeout = function(timeout) {
    LatUtils.checkNumber(timeout, "timeout");
    if (timeout < 0) {
        LatUtils._error("timeout has to be an unsigned int, invalid value (" + timeout + ")");
    }
    this.timeout = timeout;
    return this;
};
Lat.prototype.setOutputFolder = function(outputFolder) {
    Io.mkdir(outputFolder); //fails if invalid
    this.outputFolder = outputFolder;
    this.updatePathVariables();
    return this;
};
Lat.prototype.setCmaker = function(cmaker) {
    if (!(cmaker instanceof CMaker)) {
        LatUtils._error("Invalid value supplied in setCmaker: the value should be an instance of CMaker");
    }
    this.cmaker = cmaker;
    return this;
};

Lat.prototype.updatePathVariables = function() {
    this._basePath = this.outputFolder + "/" + this.name;
    this._resultsFolder = this._basePath + "/results"; /** the folder that will contain the results of compiling the and executing the variants */
    this._variantsFolder = this._basePath + "/variants"; /** the folder that will contain the generated code (variants) and also the compiled versions that will be executed */
    this._graphsFolder = this._resultsFolder + "/graphs"; /** the folder that will hold the charts */
    this._timerFileName = "/times.txt"; /** the filename where the executed variants will write to */
    this._timerFile = this._resultsFolder + this._timerFileName; /** the complete file path for _timerFileName */

    //create the timer file and get it's absolute path
    var fullTimerPath = Io.getAbsolutePath(this._timerFile);
    var replacerPath = new Replacer(fullTimerPath);
    replacerPath.replaceAll("\\", "/");
    this._timerFileAbsolute = replacerPath.getString();

    this._bestResult = this._resultsFolder + "/best"; /** the folder that will hold the best variant source code without timer prints */
    this._templateFolder = "../lat/templates/"; /** the file that will contain each tuning operation's report */
    this._reporterTemplate = "../lat/templates/report.html"; /** the file that will contain each tuning operation's report */
    return this;
};

//--------------------------------------------Helper functions (code compartimentalization)

Lat.prototype.loadDefaults = function(name, scope, variables, measure, searchType, numTests, removeDuplicates, clearCode, verbose, abort, timeout, outputFolder) {
    //requried values
    this.name = this.validateProperty("name", name);
    this.scope = this.validateProperty("scope", scope);

    //optional values
    this.variables = this.validateProperty("variables", variables, []);
    this.measure = this.validateProperty("measure", measure, scope);
    this.searchType = this.validateProperty("searchType", searchType, LatConst.SEARCH_TYPE.INDEPENDENT);
    this.numTests = this.validateProperty("numTests", numTests, 1);
    this.removeDuplicates = this.validateProperty("removeDuplicates", removeDuplicates, true);
    this.clearCode = this.validateProperty("clearCode", clearCode, false);
    this.verbose = this.validateProperty("verbose", verbose, false);
    this.abort = this.validateProperty("abort", abort, false);
    this.timeout = this.validateProperty("timeout", timeout, 0);
    this.outputFolder = this.validateProperty("outputFolder", outputFolder, ".");
    this.updatePathVariables();
};

Lat.prototype.loadCmaker = function() {
    this.cmaker = new CMaker("tempName")
        .setMinimumVersion("3.0.2")
        //.setMakeCommand("make")
        .addCxxFlags("-O3", "-std=c++11")
        .addLibs("stdc++")
        .setGenerator("MinGW Makefiles");
    return this;
};

/**
 * Return either the correct value or the default value for a given property
 */
Lat.prototype.validateProperty = function(propertyName, value, defaultValue) {
    /*TODO: use this[propertyName]
    
    if (defaultValue === undefined && value === undefined) {
        LatUtils._error("The value specified for the property '" + propertyName + "' is undefined and it is a required property");
    }*/
    if (value === undefined) {
        value = defaultValue;
    }
    return value;
};

Lat.prototype.checkCmakerOptions = function() {
    if (this.cmaker === undefined) {
        LatUtils._warn("Before executing a .tune() operation you need to set the value of CMaker - if this is not done, the code might not execute! - Using default options");
        return this.loadCmaker(); //loads the default cmaker
    }
}


Lat.prototype.restartPrintLog = function() {
    this._printLog = "";
}

/**
 * Wrapper function to deal with verbosity level, only prints the message if this.verbose is true
 * @param message the message tou output
 * @param noNewLine if this is undefined or considered as false println will be used, if it is set to true print will be used to ouput the message
 */
Lat.prototype.print = function(message, noNewLine) {
    message = message === undefined ? "" : this.getIndent() + message;
    if (this.verbose) {
        if (noNewLine) { //no new line, no indent
            this._printLog += message;
            print(message);
        } else { //new line with indent
            this._printLog += message + "\n";
            println(message);
        }
    }
    return this;
};

/**
 * update indentation of prints, increase for hierarchy
 */
Lat.prototype.pushIndent = function() {
    this._printIndentation++;
    return this;
};

/**
 * update indentation of prints, decrease for hierarchy
 */
Lat.prototype.popIndent = function() {
    this._printIndentation--;
    return this;
};

/**
 * get current indentation of prints, decrease for hierarchy
 */
Lat.prototype.getIndent = function() {
    var result = "";
    for (var i = 0; i < this._printIndentation; i++) {
        result += "    ";
    }
    return result;
};

Lat.prototype.getTuneName = function() {
    return this.name + "_" + this._tuneCounts;
}
Lat.prototype.getReportTuneName = function() {
        return this._resultsFolder + "/report_" + this.getTuneName() + ".html";
    }
    //--------------------------------------------Core functions (variants generation)

/**
 * Generate the searchGroups for dependent and independent search
 */
Lat.prototype.generateSearchGroups = function() {
    if (this.searchType === LatConst.SEARCH_TYPE.INDEPENDENT) {
        this.searchGroups = [];
        for (var i = 0; i < this.variables.length; i++) {
            this.searchGroups.push([this.variables[i]]);
        }
    } else if (this.searchType === LatConst.SEARCH_TYPE.DEPENDENT) {
        this.searchGroups = this.variables;
    }
    return this;
};
/**
 * create a list of unique variables from search groups for the custom searchtype, or return this.variables for the other cases 
 */
Lat.prototype.generateUniqueVariables = function() {
    this.print("Searching for Unique Variables...", true);
    this.uniqueVariables = [];
    if (this.searchType === LatConst.SEARCH_TYPE.CUSTOM) {
        for (var i = 0; i < this.searchGroups.length; i++) { //iterate all search groups
            for (var j = 0; j < this.searchGroups[i].length; j++) { //iterate all variables in a search group
                this.uniqueVariables.push(this.searchGroups[i][j]);
            }
        }
        this.uniqueVariables = LatUtils.removeDuplicates(this.uniqueVariables);
    } else {
        this.uniqueVariables = this.variables;
    }

    this.uniqueVariables = this.uniqueVariables.map( //back referencing the index, useful for generateUniqueVariants
        function(x, i) {
            x.index = i;
            return x;
        });

    this.print("Done - " + this.uniqueVariables.length + " unique variables found", true).print();
    return this;
};

/**
 * Creates an array with the exact number of objects as there are unique variables, to be used as a stub further along the program
 */
Lat.prototype.generateBaseVariant = function() {
    this.baseVariant = [];
    for (var i = 0; i < this.uniqueVariables.length; i++) {
        this.baseVariant.push(LatUtils.clone(LatConst.LAT_VALUE.DEFAULT));
    }
    return this;
};

/**
 * remove redundant search groups by maping the variants into an array of variants
 */
Lat.prototype.generateUniqueVariants = function() {
    this.print("Generating Unique Variants...", true).pushIndent();
    this.uniqueVariants = []; // a list 
    for (var i = 0; i < this.searchGroups.length; i++) {
        this.currentVariant = LatUtils.clone(this.baseVariant); //if this is not clone it's values will be changed
        this.generateVariantsRecursive(this.searchGroups[i], 0, i);
    }

    if (this.removeDuplicates) {
        this.numUniqueVariants = this.uniqueVariants.length;
        this.print(this.numUniqueVariants + " unique variants generated", true);
        this.print();
        this.print("Removing Duplicates from Generated Variants...");
        this.uniqueVariants = LatUtils.removeDuplicatesCloned(this.uniqueVariants);

        this.print("Done - " + (this.numUniqueVariants - this.uniqueVariants.length) + " redundant variant(s) removed - total: " + this.uniqueVariants.length);
    }
    this.popIndent().print("Done - " + this.uniqueVariants.length + " unique variants generated", true).print();
    return this;
};

/**
 * 
 * @param searchGroup a list with the LatVars of the current searchGroup
 * @param index the current index being delt with, of searchGroup
 */
Lat.prototype.generateVariantsRecursive = function(searchGroup, index, searchGroupIndex) {
    while (searchGroup[index].hasNext()) {
        if ((index + 1) < searchGroup.length) {
            this.currentVariant[searchGroup[index].index] = searchGroup[index].getNext(); //keep uniqueVariants order of elements the same as the order of unique Variants
            this.generateVariantsRecursive(searchGroup, index + 1, searchGroupIndex); //next LatVar in the searchGroup
        } else {
            while (searchGroup[index].hasNext()) {
                this.currentVariant[searchGroup[index].index] = searchGroup[index].getNext(); //only update the value
                this.uniqueVariants.push({
                    variant: LatUtils.clone(this.currentVariant),
                    searchGroupIndex: searchGroupIndex,
                    executable: ""
                }); //save to the array the format {variant:,searchGroupIndex}
            }
        }
    }
    searchGroup[index].restart();
};

//--------------------------------------------Core functions (source code generation)

Lat.prototype.generateSourceCode = function() {
    this.print("Generating Source Code...", true).pushIndent().print();
    //0 check if any includes are necessary
    this.checkIncludes();

    var countVarsPerVariant = this.uniqueVariables.length; //avoid multiple accesses
    for (var i = 0; i < this.uniqueVariants.length; i++) { //foreach variant
        this.print("Generating for Variant " + (i + 1) + " of " + this.uniqueVariants.length + "...", true).pushIndent();
        Clava.pushAst(); //preserve the initial ast before changing it : LowLevelApi.getNode(this.scope).hashCode()
        // Find equivalent join points
        var $eqScope = LatUtils.findNewJp(this.scope);
        var $eqMeasure = LatUtils.findNewJp(this.measure);

        //1st alter  the value of all variables according to the current variant
        for (var j = 0; j < countVarsPerVariant; j++) { //foreach variable in the current variant
            if (!this.uniqueVariants[i].variant[j].default) { //only edit if the default value is not selected

                var callOutput = undefined;
                if (!LatUtils.isLatVarOmp(this.uniqueVariables[j])) { //omp does not use vardecl nor varref
                    if($eqScope.instanceOf("scope")){
                        call callOutput: getJoinpointsToChangeForSingleLatVarScope($eqScope, this.uniqueVariables[j]); 
                    }else{
                        call callOutput: getJoinpointsToChangeForSingleLatVar($eqScope, this.uniqueVariables[j]); 
                    }
                } else {
                    call callOutput: getJoinpointsToChangeForLatVarOmp(this.uniqueVariables[j]);
                }
                this.uniqueVariables[j] = callOutput.latvarOut;
                this.uniqueVariables[j].changeVariantInAst(this.scope, this.uniqueVariants[i].variant[j]); //update the AST with the current value for this LatVar's variant
            }
        }
        //2nd include the timer prints
        var timer = new Timer("NANOSECONDS", this._timerFileAbsolute);
        timer.time($eqMeasure, this.getTuneName() + " " + i + " ");

        //3rd write the variant to the output folder
        Clava.writeCode(this._variantsFolder + "/" + i);

        //4th use CMaker
        this.uniqueVariants[i].executable = this.generateExecutable(i); //save the executable

        Clava.popAst(); //retrieve the initial ast after changing it, to allow multiple changes
        this.popIndent().print("Done", true).print();
    }
    this.popIndent().print("Done", true).print();
};

/**
 * Execute the source code generated by this.generateSourceCode, [this.numTests] number of times
 */
Lat.prototype.executeSourceCode = function() {
    for (var i = 0; i < this.numTests; i++) {
        this.print("Starting test " + (i + 1) + " of " + this.numTests + "...").pushIndent();
        for (var j = 0; j < this.uniqueVariants.length; j++) {
            this.print("Executing Variant " + (j + 1) + " of " + this.uniqueVariants.length + "...", true).pushIndent();

            new ProcessExecutor()
                .setPrintToConsole(false)
                .setWorkingDir(this._variantsFolder + "/" + j)
                .execute(this.uniqueVariants[j].executable + " " + this.executionFlags);

            this.popIndent().print("Done");
        }
        this.popIndent().print("Done");
    }

    if (this.clearCode) { //remove all the created files
        this.print("Clearing generated variants from your system...", true).pushIndent();
        Io.deleteFolder(this._variantsFolder);
        this.popIndent().print("Done");
    }
};

Lat.prototype.parseResults = function(emptyFileAfterwards) {
    this.print("Parsing the results...", true).pushIndent();

    //reading the results
    var contents = Io.readFile(this._timerFile); // contents of txt file
    if (!contents) { LatUtils._error("Lat.parseResults: Unable to find file: " + this._timerFile + ". (this should be created automatically bu running each variant's source code) Aborting..."); return; }
    var lines = contents.split("\n"); // split into an array in which each line is an array element
    this.results = {}; // a named object, the name is the tune name and the content is an array of time measures
    for (var i = 0; i < lines.length; i++) {
        //parse one line from the timer file into variables
        //format: tuneName variant time
        var parts = lines[i].split(" "); // 0 -> [name]_[index], 1->[variant]_[index], 2->[time]ns
        if (parts.length != 3) { continue; }

        if (!this.results[parts[0]]) {
            this.results[parts[0]] = {
                "overall": { "best_variant": -1, "best_time": -1, "times": [] },
                "per_variant": {}
            };
        } //create result var for the tune operation, if not exists

        if (!this.results[parts[0]]["per_variant"][parts[1]]) {
            //this.results[parts[0]]["per_variant"] = { "variant": parts[1], "avg": -1, "sum": 0, "times" : [] };
            this.results[parts[0]]["per_variant"][parts[1]] = { "avg": -1, "sum": 0, "times": [] };
        } //create new variant in the tune operation, if not exists
        var time = parseInt(parts[2].slice(0, -1));
        this.results[parts[0]]["overall"]["times"].push({ "variant": parts[1], "time": time });
        this.results[parts[0]]["per_variant"][parts[1]]["times"].push(time);
        this.results[parts[0]]["per_variant"][parts[1]]["sum"] += time; //update the sum
    }

    for (var tuneResult in this.results) { //result contains the named tune operations
        this.results[tuneResult]["overall"]["times"].sort(LatUtils.sortResultOverallTimes);
        this.results[tuneResult]["overall"]["best_variant"] = this.results[tuneResult]["overall"]["times"][0]["variant"];
        this.results[tuneResult]["overall"]["best_time"] = this.results[tuneResult]["overall"]["times"][0]["time"];
        for (var variant in this.results[tuneResult]["per_variant"]) { //tuneResult contains the variants
            this.results[tuneResult]["per_variant"][variant]["avg"] = this.results[tuneResult]["per_variant"][variant]["sum"] / this.results[tuneResult]["per_variant"][variant]["times"].length; //calculate the average time for this variant
            delete this.results[tuneResult]["per_variant"][variant]["sum"];
        }
    }

    if (emptyFileAfterwards) { //delete the processed contents of the file
        Io.writeFile(this._timerFile, "");
    }

    this.popIndent().print("Done", true).print();
};

Lat.prototype.getResults = function() {
    if (!this._tunned) { LatUtils._error("A tuning operation is required before calling getResutls()"); }
    return LatUtils.clone(this.results);
}

Lat.prototype.generateReport = function() {
    this.print("Generating the report...", true).pushIndent();
    if (Object.keys(this.results).length == 0) {
        LatUtils._warn("Results is empty...report will not be processed.");
        this.popIndent().print("Failed (empty results - check cmaker options)", true).print();
    } else {
        var reporter = new LatReport(this);
        reporter.generateReport();

        this.popIndent().print("Done", true).print();
    }
}

Lat.prototype.checkVariablesInScope = function() {
    this.print("Checking the validity of the supplied variables...", true).pushIndent();
    //get a list of vardecl
    //TODO: check if each variable has a vardecl or at least a varref in the scope
    if(this.scope.instanceOf("scope")){
        call callOutput: findVardeclInJoinpointScope(this.scope);
    }else{
        call callOutput: findVardeclInJoinpoint(this.scope);
    }
    var foundVariables = callOutput.list;
    if (foundVariables.length < this.uniqueVariables.length) {
        LatUtils._error("Not enough variables in the source code to match the supplied LatVars in this scope found: [" + foundVariables + "]");
    }
    for (var i = 0; i < this.uniqueVariables.length; i++) {
        if (!LatUtils.isLatVarOmp(this.uniqueVariables[i])) {
            var found = false;
            for (var j = 0; j < foundVariables.length; j++) {
                if (this.uniqueVariables[i].name == foundVariables[j]) {
                    found = true;
                }
            }
            if (!found) {
                LatUtils._error("Variable '" + this.uniqueVariables[i].name + "' declaration not found in the variables available in the current scope: [" + foundVariables + "]");
            }
        }
    }
    this.popIndent().print("Done - no errors were found", true).print();
};

Lat.prototype.checkIncludes = function() {
    //omp.h include
    var ompInclude = false;
    for (var i = 0; i < this.uniqueVariables.length; i++) {
        if (LatUtils.isLatVarOmp(this.uniqueVariables[i])) {
            ompInclude = true;
            break;
        }
    }
    if (ompInclude) {
        this.file.addInclude("omp.h");
    }

};

Lat.prototype.generateExecutable = function(i) {

    this.cmaker.sources = new CMakerSources();
    this.cmaker.includeFolders = new StringSet();
    //this.cmaker.sources.addSource(this.file.relativeFilepath);
    this.cmaker.addIncludeFolder("../" + i);
    this.cmaker.name = "variant_" + i;

    var buildFolder = Io.getPath(this._variantsFolder + "/" + i, "build");
	
	call out1 : addFiles();
	for(var file of out1.files) {
		this.cmaker.sources.addSource(file);
	}
	
    return this.cmaker.build(this._variantsFolder + "/" + i, buildFolder);
};