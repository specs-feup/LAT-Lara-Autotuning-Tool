import lat.LatVar;

import lat.LatVarList;
import lat.LatVarRange;
import lat.LatVarOmp;

import lat.LatConsts;
import lat.LatUtils;

import lara.Io;

//TODO: INCLUIR VARIÁVEL QUE DIZ A PASTA ONDE SE GERA O CODIGO E AQUELA ONDE APARECEM OS RESULTADOS E AQUELAS TIPO SHOW RESULTS AS CHARTS OU MELHOR, TORNAR ISSO NUMA FUNÇÃO

var Lat = function(name, scope, variables, measure, searchType, numTests, clearCode, verbose, abort, timeout) {
    this.loadDefaults(name, scope, variables, measure, searchType, numTests, clearCode, verbose, abort, timeout);

    //this["name"] = name;

    this.vars = [];
};

Lat.prototype.tune = function() {
    LatUtils._error("function tune not implemented");
};


Lat.prototype.toConfig = function(filename) {
    filename = LatUtils.getRightExtension(filename, "json");
    writeFile(filename, JSON.stringify(this));
};

Lat.prototype.fromConfig = function(filename) {
    var filecontents = readFile(filename);

    println("CONTENTS: " + filecontents);
    var temp = JSON.parse(filecontents);
    for (var property in temp) {
        println("property: " + property + " = " + temp[property]);
        //this["temp"] = temp[property];
    }
    println("name is:" + this.name);
};

Lat.prototype.countVariants = function() {
    LatUtils._error("function countVariants not implemented");
};

Lat.prototype.estimateTime = function() {
    LatUtils._error("function estimateTime not implemented");
};



//Helper functions (code compartimentalization)
Lat.prototype.loadDefaults = function(name, scope, variables, measure, searchType, numTests, clearCode, verbose, abort, timeout) {
    this.name = this.validateProperty("name", name);
    this.scope = this.validateProperty("scope", scope);
    this.variables = this.validateProperty("variables", variables, []);
    this.measure = this.validateProperty("measure", measure, scope);
    this.searchType = this.validateProperty("searchType", searchType, LatConst.SEARCH_TYPE.INDEPENDENT);
    this.numTests = this.validateProperty("numTests", numTests, 1);
    this.clearCode = this.validateProperty("clearCode", clearCode, false);
    this.verbose = this.validateProperty("verbose", verbose, false);
    this.abort = this.validateProperty("abort", abort, false);
    this.timeout = this.validateProperty("timeout", timeout, 0);
};

Lat.prototype.validateProperty = function(propertyName, value, defaultValue) {
    if (defaultValue === undefined && value === undefined) {
        LatUtils._error("The value specified for the property '" + propertyName + "' is undefined and it is a required property");
    }
    if (value === undefined) {
        value = defaultValue;
    }
    return value;
};