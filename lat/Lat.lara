import lat.LatVar;

import lat.LatVarList;
import lat.LatVarRange;
import lat.LatVarOmp;

import lat.LatConsts;
import lat.LatUtils;

import lara.Io;

import clava.Clava;

var Lat = function(name, scope, variables, measure, searchType, numTests, removeDuplicates, clearCode, verbose, abort, timeout, outputPath) {
    this.loadDefaults(name, scope, variables, measure, searchType, numTests, removeDuplicates, clearCode, verbose, abort, timeout, outputPath);
    this._tunned = false; /** set to true after a tuning execution, used to block functions that require tune, such as printResults */
    this._printIndentation = 0; /** indicates the hierarchy level of the print operations */
};

Lat.prototype.tune = function() {
    this.print("Starting tuning operation");
    this.pushIndent();
    this._tunned = false;
    if (this.searchType === LatConst.SEARCH_TYPE.DEPENDENT || this.searchType === LatConst.SEARCH_TYPE.INDEPENDENT) {
        this.variables = LatUtils.removeDuplicates(this.variables);
    }
    this.generateSearchGroups();
    this.generateUniqueVariables();
    this.generateBaseVariant(); //must come after generateUniqueVariables
    this.generateUniqueVariants();
    this._tunned = true;
    this.popIndent();
    this.print("Tuning operation complete");
};


Lat.prototype.toConfig = function(filename) {
    filename = LatUtils.getRightExtension(filename, "json");
    Io.writeJson(filename, this);
    writeFile(filename, JSON.stringify(this));
};

Lat.prototype.fromConfig = function(filename) {
    LatUtils._error("function fromConfig not implemented, missing 'this[property]' access");
    var temp = Io.readJson(filename);
    for (var property in temp) {
        //println("property: " + property + " = " + temp[property]);
        //TODO: check it works after fixing this[property]
        //this[property] = temp[property];
    }
};

Lat.prototype.countVariants = function() {
    var count = 0;
    if (this.searchType == LatConst.SEARCH_TYPE.DEPENDENT) {
        //dependent search means for every var, every other's value will be used -> product
        count = 1;
        for (var i = 0; i < this.variables.length; i++) {
            count *= this.variables[i].countElements();
        }
    } else if (this.searchType == LatConst.SEARCH_TYPE.INDEPENDENT) {
        //independent search iterates a single variable while keeping all the others constant -> sum
        for (var i = 0; i < this.variables.length; i++) {
            count += this.variables[i].countElements();
        }
    } else if (this.searchType == LatConst.SEARCH_TYPE.CUSTOM) {
        //each search group acts as a dependent search, and between search groups the pattern is dependent
        for (var i = 0; i < this.searchGroups.length; i++) {
            var temp = 1;
            for (var j = 0; j < this.searchGroups[i].length; j++) {
                temp *= this.searchGroups[i][j].countElements();
            }
            count += temp;
        }
    }
    return count;
};

Lat.prototype.estimateTime = function() {
    LatUtils._error("function estimateTime not implemented");
};

//--------------------------------------------Setters

Lat.prototype.setName = function(name) {
    LatUtils.checkString(name, "name");
    this.name = name;
    return this;
};
Lat.prototype.setScope = function(scope) {
    LatUtils.checkJoinpoint(scope, "scope");
    this.scope = scope;
    return this;
};
Lat.prototype.setMeasure = function(measure) {
    LatUtils.checkJoinpoint(measure, "measure");
    this.measure = measure;
    return this;
};
Lat.prototype.setVariables = function(variables) {
    LatUtils.checkLatVars(variables, "variables");
    LatUtils.checkDuplicatesLatVar(variables, "variables");
    this.variables = variables;
    return this;
};
Lat.prototype.addVariable = function(latVar) {
    LatUtils.checkLatVar(latVar, "latVar in addVariable");
    LatUtils.checkDuplicateLatVar(this.variables, latVar, "variables");
    this.variables.push(latVar);
    return this;
};
Lat.prototype.setSearchGroups = function(searchGroups) {
    for (var i = 0; i < searchGroups.length; i++) {
        //checking for LatVar types
        LatUtils.checkLatVars(searchGroups[i], "searchGroups[" + i + "]");
        //checking for duplicate variables in searchgroups, not allowed
        var tempVars = [];
        for (var j = 0; j < searchGroups[i].length; j++) {
            LatUtils.checkDuplicateLatVar(tempVars, searchGroups[i][j], "searchGroups[" + i + "][" + j + "] (name: '" + searchGroups[i][j].name + "')");
            tempVars.push(searchGroups[i][j]);
        }
    }
    //all is ok
    this.searchGroups = searchGroups;
    this.searchType = LatConst.SEARCH_TYPE.CUSTOM;
    return this;
};
Lat.prototype.addSearchGroup = function(searchGroup) {
    var tempSearchGroups = this.searchGroups;
    tempSearchGroups.push(searchGroup);
    return this.setSearchGroups(tempSearchGroups);
};
Lat.prototype.setSearchType = function(searchType) {
    if (searchType !== LatConst.SEARCH_TYPE.INDEPENDENT && searchType !== LatConst.SEARCH_TYPE.DEPENDENT) {
        LatUtils._error("setSearchType only accepts LatConst.SEARCH_TYPE.INDEPENDENT and LatConst.SEARCH_TYPE.DEPENDENT, see the documentation on how to specify LatConst.SEARCH_TYPE.CUSTOM");
    }
    this.searchGroups = []; //will be generated when tune() is called
    this.searchType = searchType;
    return this;
};
Lat.prototype.setNumTests = function(numTests) {
    if (numTests <= 0) {
        LatUtils._error("numTests has to be an int greater or equal to 1, invalid value (" + numTests + ")");
    }
    this.numTests = numTests;
    return this;
};
Lat.prototype.setRemoveDuplicates = function(removeDuplicates) {
    LatUtils.checkBoolean(removeDuplicates, "removeDuplicates");
    this.removeDuplicates = removeDuplicates;
    return this;
};
Lat.prototype.setClearCode = function(clearCode) {
    LatUtils.checkBoolean(clearCode, "clearCode");
    this.clearCode = clearCode;
    return this;
};
Lat.prototype.setVerbose = function(verbose) {
    LatUtils.checkBoolean(verbose, "verbose");
    this.verbose = verbose;
    return this;
};
Lat.prototype.setAbort = function(abort) {
    LatUtils.checkBoolean(abort, "abort");
    this.abort = abort;
    return this;
};
Lat.prototype.setTimeout = function(timeout) {
    LatUtils.checkNumber(timeout, "timeout");
    if (timeout < 0) {
        LatUtils._error("timeout has to be an unsigned int, invalid value (" + timeout + ")");
    }
    this.timeout = timeout;
    return this;
};
//TODO: validate path
Lat.prototype.setOutputPath = function(outputPath) {
    this.outputPath = outputPath;
    return this;
};

//--------------------------------------------Helper functions (code compartimentalization)

Lat.prototype.loadDefaults = function(name, scope, variables, measure, searchType, numTests, removeDuplicates, clearCode, verbose, abort, timeout, outputPath) {
    //requried values
    this.name = this.validateProperty("name", name);
    this.scope = this.validateProperty("scope", scope);

    //optional values
    this.variables = this.validateProperty("variables", variables, []);
    this.measure = this.validateProperty("measure", measure, scope);
    this.searchType = this.validateProperty("searchType", searchType, LatConst.SEARCH_TYPE.INDEPENDENT);
    this.numTests = this.validateProperty("numTests", numTests, 1);
    this.removeDuplicates = this.validateProperty("removeDuplicates", removeDuplicates, true);
    this.clearCode = this.validateProperty("clearCode", clearCode, false);
    this.verbose = this.validateProperty("verbose", verbose, false);
    this.abort = this.validateProperty("abort", abort, false);
    this.timeout = this.validateProperty("timeout", timeout, 0);
    //TODO: fill with correct default value
    this.outputPath = this.validateProperty("outputPath", outputPath, ".");
};

/**
 * Return either the correct value or the default value for a given property
 */
Lat.prototype.validateProperty = function(propertyName, value, defaultValue) {
    /*TODO: use this[propertyName]
    
    if (defaultValue === undefined && value === undefined) {
        LatUtils._error("The value specified for the property '" + propertyName + "' is undefined and it is a required property");
    }*/
    if (value === undefined) {
        value = defaultValue;
    }
    return value;
};

/**
 * Wrapper function to deal with verbosity level, only prints the message if this.verbose is true
 * @param message the message tou output
 * @param noNewLine if this is undefined or considered as false println will be used, if it is set to true print will be used to ouput the message
 */
Lat.prototype.print = function(message, noNewLine) {
    message = message === undefined ? "" : this.getIndent() + message;
    if (this.verbose) {
        if (noNewLine) {
            print(message);
        } else {
            println(message);
        }
    }
};

/**
 * update indentation of prints, increase for hierarchy
 */
Lat.prototype.pushIndent = function() {
    this._printIndentation++;
    return this;
};

/**
 * update indentation of prints, decrease for hierarchy
 */
Lat.prototype.popIndent = function() {
    this._printIndentation--;
    return this;
};

/**
 * get current indentation of prints, decrease for hierarchy
 */
Lat.prototype.getIndent = function() {
    var result = "";
    for (var i = 0; i < this._printIndentation; i++) {
        result += "  ";
    }
    return result;
};

//--------------------------------------------Core functions (variants generation)

/**
 * Generate the searchGroups for dependent and independent search
 */
Lat.prototype.generateSearchGroups = function() {
    if (this.searchType === LatConst.SEARCH_TYPE.INDEPENDENT) {
        this.searchGroups = [];
        for (var i = 0; i < this.variables.length; i++) {
            this.searchGroups.push([this.variables[i]]);
        }
    } else if (this.searchType === LatConst.SEARCH_TYPE.DEPENDENT) {
        this.searchGroups = this.variables;
    }
    return this;
};
/**
 * create a list of unique variables from search groups for the custom searchtype, or return this.variables for the other cases 
 */
Lat.prototype.generateUniqueVariables = function() {
    this.print("Searching for Unique Variables...", true);
    this.uniqueVariables = [];
    if (this.searchType === LatConst.SEARCH_TYPE.CUSTOM) {
        for (var i = 0; i < this.searchGroups.length; i++) { //iterate all search groups
            for (var j = 0; j < this.searchGroups[i].length; j++) { //iterate all variables in a search group
                this.uniqueVariables.push(this.searchGroups[i][j]);
            }
        }
        this.uniqueVariables = LatUtils.removeDuplicates(this.uniqueVariables);
    } else {
        this.uniqueVariables = this.variables;
    }

    this.uniqueVariables = this.uniqueVariables.map( //back referencing the index, useful for generateUniqueVariants
        function(x, i) {
            x.index = i;
            return x;
        });

    this.print("Done - " + this.uniqueVariables.length + " unique variables found", true);
    this.print();
    return this;
};

/**
 * Creates an array with the exact number of objects as there are unique variables, to be used as a stub further along the program
 */
Lat.prototype.generateBaseVariant = function() {
    this.baseVariant = [];
    for (var i = 0; i < this.uniqueVariables.length; i++) {
        this.baseVariant.push(LatUtils.clone(LatConst.LAT_VALUE.DEFAULT));
    }
    return this;
};

/**
 * remove redundant search groups by maping the variants into an array of variants
 */
Lat.prototype.generateUniqueVariants = function() {
    this.print("Generating Unique Variants...", true);
    this.pushIndent();
    this.uniqueVariants = []; // a list 
    for (var i = 0; i < this.searchGroups.length; i++) {
        this.currentVariant = LatUtils.clone(this.baseVariant); //if this is not clone it's values will be changed
        this.generateVariantsRecursive(this.searchGroups[i], 0);
    }

    if (this.removeDuplicates) {
        this.print();
        this.print("removing Duplicates from Generated Variants...");
        var countInitial = this.uniqueVariants.length;
        this.uniqueVariants = LatUtils.removeDuplicatesCloned(this.uniqueVariants);

        this.print("Done - " + (countInitial - this.uniqueVariants.length) + " unique variants removed - total: " + this.uniqueVariants.length);
    }
    this.popIndent();
    this.print("Done - " + this.uniqueVariants.length + " unique variants generated", true);
    this.print();
    /*println("removed duplicates: " + this.uniqueVariants.length + " uniqueVariants: ");
    print();
    for (var i = 0; i < this.uniqueVariants.length; i++) {
        for (var j = 0; j < this.uniqueVariants[i].length; j++) {
            if (this.uniqueVariants[i][j].default) {
                print("0 - ");
            } else {
                print(this.uniqueVariants[i][j].value + " - ");
            }
        }
        println();
    }
    //this.uniqueVariants.map(outs);*/
    return this;
};

/**
 * 
 * @param searchGroup a list with the LatVars of the current searchGroup
 * @param index the current index being delt with, of searchGroup
 */
Lat.prototype.generateVariantsRecursive = function(searchGroup, index) {
    while (searchGroup[index].hasNext()) {
        if ((index + 1) < searchGroup.length) {
            this.currentVariant[searchGroup[index].index] = searchGroup[index].getNext();
            this.generateVariantsRecursive(searchGroup, index + 1); //next LatVar in the searchGroup
        } else {
            while (searchGroup[index].hasNext()) {
                this.currentVariant[searchGroup[index].index] = searchGroup[index].getNext(); //only update the value
                this.uniqueVariants.push(LatUtils.clone(this.currentVariant)); //save to the array
            }
        }
    }
    searchGroup[index].restart();
};

var outs = function(a) {
    println(JSON.stringify(a));
};