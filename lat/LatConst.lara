//NOTE: When adding constants and methods, make sure constants start with UPPERCASE and methods with lowercase
import lara.System;

var LatConst = {};

/**
 * Display all the available properties
 */
LatConst.getAvailable = function() {
    for (var property in this) { //iterate LatConst elements
        if (property.charAt(0).toUpperCase() == property.charAt(0)) { //only the properties start with uppercase
            println("LatConst." + property);
        }
    }
};

/**
 * Read the total number of hardware threads on the CPU for the current machine
 */
LatConst.getNumCpuThreads = function() {
    return System.getNumLogicalCores();
};

/**
 * Read the cache line size in bytes for the current machine
 */
LatConst.getCacheLineSize = function() {
    //TODO: read from the system
    return 64;
};

LatConst.getSearchType = function(searchType) {
    if (searchType == LatConst.SEARCH_TYPE.DEPENDENT) {
        return "dependent";
    } else if (searchType == LatConst.SEARCH_TYPE.INDEPENDENT) {
        return "indepenedent";
    } else if (searchType == LatConst.SEARCH_TYPE.CUSTOM) {
        return "custom";
    }
};

//CONSTANTS
LatConst.NUM_CPU_THREADS = LatConst.getNumCpuThreads();
LatConst.L1_CACHE_LINESIZE = LatConst.getCacheLineSize();

LatConst.SEARCH_TYPE = {
    INDEPENDENT: 1,
    DEPENDENT: 2,
    CUSTOM: 3
};

LatConst.TYPE = {
    BOOLEAN: "boolean",
    STRING: "string",
    NUMBER: "number",
    OBJECT: "object",
    JOINPOINT: "Joinpoint 'type'"
};

/**
 * The uses of varref variables
 */
LatConst.VAR_USES = {
    READ: "read",
    WRITE: "write",
    READWRITE: "readwrite"
};

/**
 * The types of the LatVars, this will be used when changing the ast so that there is no ambiguity when generating the variants
 */
LatConst.OUTPUT_TYPE = {
    AUTO: 1,
    CHAR: 2,
    STRING: 3
};

//common Lat combinations skeletons 
LatConst.LAT_VALUE = {
    DEFAULT: { type: LatConst.OUTPUT_TYPE.AUTO, value: 0, default: true },
    EMPTY: { type: LatConst.OUTPUT_TYPE.AUTO, value: 0, default: false }
};