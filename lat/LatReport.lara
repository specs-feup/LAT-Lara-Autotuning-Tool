import lara.Io;
import lara.util.Replacer;

import lat.LatConst;
import lat.LatUtils;
import lat.templates;


var LatReport = function(lat) {
    this.lat = lat;
    this.replacer = new Replacer(templates.getString("report"));
    //this.replacer = Replacer.fromFilename(this.lat._reporterTemplate);

};

LatReport.prototype.generateReport = function() {
    //replace the values in the template for the real ones

    //tables in the template
    this.replaceConfigurations();
    this.replaceSystemConstants();
    this.replaceOverallResults();

    this.replaceVariablesCards();

    this.replaceSearchGroupLinks();
    this.replaceSearchGroupDivs();

    this.replacer.replaceAll("[[completeVariants]]", this.getCompleteVariantsTable()); //complete variants table
    this.replacer.replaceAll("[[consoleOutput]]", this.lat._printLog + "    Done\nTuning operation complete");

    this.replaceFooter();

    Io.writeFile(this.lat.getReportTuneName(), this.replacer.getString()); //write the replaced template
    this.includeResources(); //include necessary css and js files
};

LatReport.prototype.replaceVariablesCards = function() {
    var variableCards = "";
    for (var i = 0; i < this.lat.uniqueVariables.length; i++) {
        variableCards += this.getVariableCard(this.lat.uniqueVariables[i]);
    }
    this.replacer.replaceAll("[[variableCards]]", variableCards);

};
LatReport.prototype.getVariableCard = function(variable) {
    var replacerCard;
    if (LatUtils.isLatVarList(variable)) {
        replacerCard = new Replacer(templates.getString("var_list"));
    } else if (LatUtils.isLatVarRange(variable)) {
        replacerCard = new Replacer(templates.getString("var_range"));
        replacerCard.replaceAll("[[start]]", variable.start);
        replacerCard.replaceAll("[[stop]]", variable.stop);
        replacerCard.replaceAll("[[step]]", variable.step);
    } else if (LatUtils.isLatVarOmp(variable)) {
        replacerCard = new Replacer(templates.getString("var_omp"));
        replacerCard.replaceAll("[[ompTypes]]", variable.scheduleTypes.join(", "));
        replacerCard.replaceAll("[[ompChunks]]", variable.scheduleChunkSize.countElements());
        replacerCard.replaceAll("[[ompNumThreads]]", variable.numThreads.countElements());
    }
    replacerCard.replaceAll("[[varName]]", variable.name);
    replacerCard.replaceAll("[[countElements]]", variable.countElements());
    replacerCard.replaceAll("[[varType]]", LatConst.getOutputType(variable.type));
    return replacerCard.getString();
};

LatReport.prototype.replaceConfigurations = function() {
    this.replacer.replaceAll("[[name]]", this.lat.name);
    this.replacer.replaceAll("[[scope]]", LatUtils.escapeHtmlCharacters(this.lat.scope.code));
    this.replacer.replaceAll("[[measure]]", LatUtils.escapeHtmlCharacters(this.lat.measure.code));
    this.replacer.replaceAll("[[variables]]", this.lat.uniqueVariables.map(function(v) { return v.name; }).join(", "));
    this.replacer.replaceAll("[[numTests]]", this.lat.numTests);
    this.replacer.replaceAll("[[searchType]]", LatConst.getSearchType(this.lat.searchType));
    this.replacer.replaceAll("[[clearCode]]", this.lat.clearCode);
    this.replacer.replaceAll("[[verbose]]", this.lat.verbose);
    this.replacer.replaceAll("[[abort]]", this.lat.abort);
    this.replacer.replaceAll("[[timeout]]", this.lat.timeout);
    this.replacer.replaceAll("[[outputFolder]]", this.lat.outputFolder);

};

LatReport.prototype.replaceOverallResults = function() {
    var bestVariantNumber = this.lat.results[this.lat.getTuneName()].overall.best_variant;
    this.replacer.replaceAll("[[tuneName]]", this.lat.getTuneName());
    this.replacer.replaceAll("[[tuneCount]]", this.lat._tuneCounts + 1);
    this.replacer.replaceAll("[[numSearchGroups]]", this.lat.searchGroups.length);
    this.replacer.replaceAll("[[numVariants]]", this.lat.uniqueVariants.length);
    this.replacer.replaceAll("[[numUniqueVariants]]", this.lat.numUniqueVariants);
    this.replacer.replaceAll("[[removeDuplicates]]", this.lat.removeDuplicates);
    this.replacer.replaceAll("[[numVariables]]", this.lat.uniqueVariables.length);
    this.replacer.replaceAll("[[bestVariantNumber]]", bestVariantNumber);
    this.replacer.replaceAll("[[bestVariant]]", this.transformVariantToText(this.lat.uniqueVariants[bestVariantNumber].variant));
    this.replacer.replaceAll("[[bestTime]]", this.lat.results[this.lat.getTuneName()].overall.best_time);
    this.replacer.replaceAll("[[numSearchGroups]]", this.lat.uniqueVariants.length);
    this.replacer.replaceAll("[[executionTime]]", (this.lat._duration / 1000000000.0) + "s");
};

LatReport.prototype.replaceSystemConstants = function() {
    this.replacer.replaceAll("[[NUM_CPU_THREADS]]", LatConst.NUM_CPU_THREADS);
    this.replacer.replaceAll("[[L1_CACHE_LINESIZE]]", LatConst.L1_CACHE_LINESIZE);
};

LatReport.prototype.replaceFooter = function() {
    this.replacer.replaceAll("[[timestampGeneration]]", LatUtils.getTime() + " - " + LatUtils.getDate());
};

LatReport.prototype.replaceSearchGroupLinks = function() {
    var searchGroupLinks = "";
    for (var i = 0; i < this.lat.searchGroups.length; i++) {
        searchGroupLinks += '<li><a href="\#">[' + this.lat.searchGroups[i].map(function(e) { return e.name; }).join(",") + ']</a></li>';
    }
    this.replacer.replaceAll("[[searchGroupLinks]]", searchGroupLinks);
};

LatReport.prototype.replaceSearchGroupDivs = function() {
    var searchGroupDivs = "";
    var searchGroupsScript = "";
    for (var i = 0; i < this.lat.searchGroups.length; i++) {
        searchGroupsScript += this.getSearchGroupScript(i);
        searchGroupDivs += this.getSearchGroupDiv(i);
    }
    this.replacer.replaceAll("[[searchGroupDivs]]", searchGroupDivs);
    this.replacer.replaceAll("[[searchGroupsScript]]", searchGroupsScript);

};

/**
 * Convert a variant into a readable string - hiding default values
 * @param {} variant the variant to convert into a readable format
 * @return the string to display - comma separated list of <name> = <value>
 */
LatReport.prototype.transformVariantToText = function(variant) {
    var result = [];
    for (var i = 0; i < variant.length; i++) { //iterate all variables in this variant
        if (!variant[i].default) { //if this is the default value
            var name = this.lat.uniqueVariables[i].name;
            if (!LatUtils.isLatVarOmp(this.lat.uniqueVariables[i])) {
                value = variant[i].value;
            } else {
                value = LatVarOmp.generateContentBody(variant[i].value);
            }
            result.push(name + " = " + value);
        }

    }
    return result.join(", ");
};

LatReport.prototype.getVariableValue = function(variable) {
    if (typeof variable === "object") {
        return '"' + LatVarOmp.generateContentBody(variable) + '"';
    } else {
        return variable;
    }
};

LatReport.prototype.getSearchGroupScript = function(index) {
    var searchGroup = this.lat.searchGroups[index];
    var replacerChart = this.getSearchGroupReplacer(searchGroup.length);

    replacerChart.replaceAll("[[searchGroupIndex]]", index);
    replacerChart.replaceAll("[[searchGroupVariables]]", searchGroup.map(function(e) { return e.name; }).join(","));

    if (searchGroup.length == 1) {
        var variableValuesX = [];
        var variablesLabel = [];
        var variableTimes = [];
        for (var i = 0; i < this.lat.uniqueVariants.length; i++) {
            if (this.lat.uniqueVariants[i].searchGroupIndex == index) { //this variant matches this searchGroup
                variableValuesX.push(this.getVariableValue(this.lat.uniqueVariants[i].variant[searchGroup[0].index].value));
                variablesLabel.push(this.transformVariantToText(this.lat.uniqueVariants[i].variant));
                variableTimes.push(this.lat.results[this.lat.getTuneName()].per_variant[i].avg);
            }
        }

        replacerChart.replaceAll("[[xValues]]", variableValuesX.map(function(ele, index) { return ele; }).join(", "));
        replacerChart.replaceAll("[[variantsLabel]]", variablesLabel.map(function(ele) { return "'" + ele + "'"; }).join(", "));
        replacerChart.replaceAll("[[yValues]]", variableTimes.join(", "));
        replacerChart.replaceAll("[[varName]]", this.lat.uniqueVariables[searchGroup[0].index].name);

    } else if (searchGroup.length == 2) {
        var variableValuesX = [];
        var variableValuesY = [];
        var variablesLabel = [];
        var variableTimes = [];
        for (var i = 0; i < this.lat.uniqueVariants.length; i++) {
            if (this.lat.uniqueVariants[i].searchGroupIndex == index) { //this variant matches this searchGroup
                variableValuesX.push(this.getVariableValue(this.lat.uniqueVariants[i].variant[searchGroup[0].index].value));
                variableValuesY.push(this.getVariableValue(this.lat.uniqueVariants[i].variant[searchGroup[1].index].value));
                variablesLabel.push(this.transformVariantToText(this.lat.uniqueVariants[i].variant));
                variableTimes.push(this.lat.results[this.lat.getTuneName()].per_variant[i].avg);
            }
        }

        replacerChart.replaceAll("[[xValues]]", variableValuesX.map(function(ele, index) { return ele; }).join(", "));
        replacerChart.replaceAll("[[yValues]]", variableValuesY.map(function(ele, index) { return ele; }).join(", "));
        replacerChart.replaceAll("[[variantsLabel]]", variablesLabel.map(function(ele) { return "'" + ele + "'"; }).join(", "));
        replacerChart.replaceAll("[[zValues]]", variableTimes.join(", "));
        replacerChart.replaceAll("[[varName1]]", this.lat.uniqueVariables[searchGroup[0].index].name);
        replacerChart.replaceAll("[[varName2]]", this.lat.uniqueVariables[searchGroup[1].index].name);
    } else {
        return "console.log(\"No display available for 4D or more, searchGroup: " + (index + 1) + "\");";
    }
    return replacerChart.getString();
};

LatReport.prototype.getSearchGroupDiv = function(index) {
    var replacerDiv = new Replacer(templates.getString("search_group_variants"));
    replacerDiv.replaceAll("[[searchGroupIndex]]", index);
    var variantsRows = "";
    var numVariantsSearchGroup = 0;
    for (var i = 0; i < this.lat.uniqueVariants.length; i++) {
        if (this.lat.uniqueVariants[i].searchGroupIndex == index) { //this variant matches this searchGroup
            numVariantsSearchGroup++;
            variantsRows += this.getVariantTableRow(i);
        }
    }
    replacerDiv.replaceAll("[[numVariantsSearchGroup]]", numVariantsSearchGroup);
    replacerDiv.replaceAll("[[variantsRows]]", variantsRows);
    return replacerDiv.getString();
};

LatReport.prototype.getCompleteVariantsTable = function() {
    var replacerDiv = new Replacer(templates.getString("search_group_variants"));
    replacerDiv.replaceAll("[[searchGroupIndex]]", "all");
    var variantsRows = "";
    var numVariantsSearchGroup = 0;
    for (var i = 0; i < this.lat.uniqueVariants.length; i++) {
        numVariantsSearchGroup++;
        variantsRows += this.getVariantTableRow(i);
    }
    replacerDiv.replaceAll("[[numVariantsSearchGroup]]", numVariantsSearchGroup);
    replacerDiv.replaceAll("[[variantsRows]]", variantsRows);
    return replacerDiv.getString();
};

LatReport.prototype.getVariantTableRow = function(i) {
    return '<tr><td>' + i + '</td><td class="uk-text-break">' + this.transformVariantToText(this.lat.uniqueVariants[i].variant) + '</td><td class="uk-text-break" title="Variant ' + i + ' times: ' + this.lat.results[this.lat.getTuneName()].per_variant[i].times.join(", ") + '" uk-tooltip>' + this.lat.results[this.lat.getTuneName()].per_variant[i].avg + '</td></tr>';
};
LatReport.prototype.getSearchGroupReplacer = function(numElements) {
    var templateName = "search_group_" + numElements + "_var_script";
    return new Replacer(templates.getString(templateName));
};


LatReport.prototype.includeResources = function() {
    //copy the css and js files

    var filesToCopy = [];
    //println("getBaseFolder: " + templates.getBaseFolder());
    var cssFiles = templates.getFileList("css");
    //println("cssFiles: " + cssFiles);
	this._createFilesToCopy(cssFiles, templates.getBaseFolder(), filesToCopy);
/*
	
    for (var i = 0; i < cssFiles.length; i++) {
        var c = String(cssFiles[i]);
        filesToCopy.push({
            path: c,
            outputTo: "css/" + c.split("\\").pop() + ".css"
        });
		println("Relative path:" + Io.getRelativePath(cssFiles[i], templates.getBaseFolder()));

    }
	*/
    var jsFiles = templates.getFileList("js");
	this._createFilesToCopy(jsFiles, templates.getBaseFolder(), filesToCopy);
/*
    for (var i = 0; i < jsFiles.length; i++) {
        var c = String(jsFiles[i]);
        filesToCopy.push({
            path: c,
            outputTo: "js/" + c.split("\\").pop() + ".js"
        });
    }
*/
    //var filesToCopy = ["css/uikit.min.css", "css/dataTables.uikit.css", "js/jquery.min.js", "js/plotly.min.js", "js/uikit.min.js", "js/uikit-icons.min.js", "js/dataTables.uikit.js", "js/jquery.dataTables.js"];
    filesToCopy.map(function(element, index) {
		//println("Copying " + element.path);
		//println("Results Folder: " + this.lat._resultsFolder);
		//println("OutputTo: " + element.outputTo);
		//println("To " + this.lat._resultsFolder + "/" + element.outputTo);
        Io.copyFile(element.path, this.lat._resultsFolder + "/" + element.outputTo);
    }, this);

};

LatReport.prototype._createFilesToCopy = function(filesArray, baseFolder, outputArray) {
	var templateSuffix = ".template";
	for (var i = 0; i < filesArray.length; i++) {
        var currentFile = filesArray[i];
		var outputPath = Io.getRelativePath(currentFile, baseFolder);
		var extLength = templateSuffix.length();	
		
		if(outputPath.endsWith(templateSuffix)) {
			outputPath = outputPath.substring(0, outputPath.length() - extLength);
		}
		
        outputArray.push({
            path: currentFile,
            outputTo: outputPath
        });
    }
}