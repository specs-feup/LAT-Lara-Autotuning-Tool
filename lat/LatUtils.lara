import lat.LatConst;
import lara.util.Replacer;
import lara.Strings;

/**
 * @class
 */
var LatUtils = {};

LatUtils._error = function(message) {
    throw new Error("Lat error: " + message);
};

LatUtils._warn = function(message) {
    println("Lat warning: " + message);
};

/**
 * Return a file name with the extension passed, only changes filename if this condition is not met
 * @param filename the original filename
 * @param extension the extension to force (without the '.', eg. 'json')
 * @return filename altered if necessary to end in the specified extension, it will be appended if necessary
 */
LatUtils.getRightExtension = function(filename, extension) {
    var realExtension = filename.split('.').pop();
    if (realExtension != extension) {
        filename += "." + extension;
    }
    return filename;
};


//validation functions
//TODO: guarantee that scope and measure are only joinpoints that can have insert before and after
LatUtils.isJoinpoint = function(variable) {
    return typeof variable === LatConst.TYPE.OBJECT && variable.type == LatConst.TYPE.JOINPOINT;
};
LatUtils.checkJoinpoint = function(variable, name) {
    if (!LatUtils.isJoinpoint(variable)) {
        LatUtils._error(name + " variable requires a joinpoint - invalid type supplied");
    }
};

LatUtils.isBoolean = function(variable) {
    return typeof variable === LatConst.TYPE.BOOLEAN;
};
LatUtils.checkBoolean = function(variable, name) {
    if (!LatUtils.isBoolean(variable)) {
        LatUtils._error(name + " variable has to be a boolean - invalid value supplied");
    }
};

LatUtils.isNumber = function(variable) {
    return typeof variable === LatConst.TYPE.NUMBER;
};
LatUtils.checkNumber = function(variable, name) {
    if (!LatUtils.isNumber(variable)) {
        LatUtils._error(name + " variable has to be a number - invalid value supplied");
    }
};

LatUtils.isString = function(variable) {
    return typeof variable === LatConst.TYPE.STRING;
};
LatUtils.checkString = function(variable, name) {
    if (!LatUtils.isString(variable)) {
        LatUtils._error(name + " variable has to be a string - invalid value supplied");
    }
};

LatUtils.isArray = function(variable) {
    return variable instanceof Array;
};
LatUtils.checkArray = function(variable, name) {
    if (!LatUtils.isArray(variable)) {
        LatUtils._error(name + " variable has to be an array - invalid value supplied");
    }
};

LatUtils.isLatVar = function(variable) {
    return variable instanceof LatVar;
};
LatUtils.checkLatVar = function(variable, name) {
    if (!LatUtils.isLatVar(variable)) {
        LatUtils._error("element " + name + " has to be a LatVar or one of its children (LatVarList, LatVarRange, LatVarOmp) to be passed - invalid value supplied");
    }
};
LatUtils.checkLatVars = function(variables, name) {
    LatUtils.checkArray(variables, name);
    for (var i = 0; i < variables.length; i++) {
        LatUtils.checkLatVar(variables[i], name + "[" + i + "]");
    }
};

LatUtils.isLatVarRange = function(variable) {
    return variable instanceof LatVarRange;
};
LatUtils.isLatVarList = function(variable) {
    return variable instanceof LatVarList;
};
LatUtils.isLatVarOmp = function(variable) {
    return variable instanceof LatVarOmp;
};
LatUtils.checkLatVarRangeOrList = function(variable, name) {
    if (!LatUtils.isLatVarRange(variable) && !LatUtils.isLatVarList(variable)) {
        LatUtils._error("element " + name + " has to be a LatVarList or a LatVarRange - invalid value supplied");
    }
};
LatUtils.checkDuplicateLatVar = function(latVars, latVar, listName) {
    for (var i = 0; i < latVars.length; i++) {
        if (latVar.equals(latVars[i])) {
            LatUtils._error("LatVar: " + latVar.name + " cannot appear more than once in the list " + listName + "(matches the element at position " + i + ")");
        }
    }
};
LatUtils.checkDuplicatesLatVar = function(latVars, listName) {
    for (var i = 0; i < latVars.length; i++) {
        for (var j = 0; j < latVars.length; j++) {
            if (i != j) {
                if (latVars[i].equals(latVars[j])) {
                    LatUtils._error("LatVar: " + latVars[i].name + " cannot appear more than once in the list " + listName + "(matches the element at positions " + i + " and " + j + ")");
                }
            }
        }
    }
};

/**
 * Remove duplicates from a javascript array
 * @param list the initial array
 * @return an array with all the unique elements of list
 */
LatUtils.removeDuplicates = function(list) {
    var seen = {};
    return list.filter(function(item, pos) {
        return list.indexOf(item) == pos;
    });
};
/**
 * Remove duplicates from a javascript array that contains cloned items, the default removeDuplicates won't work
 * @param list the initial array
 * @return an array with all the unique elements of list
 */
LatUtils.removeDuplicatesCloned = function(list) {
    var seen = {};
    return list.filter(function(item, pos) {
        return LatUtils.indexOf(list, item) == pos;
    });
};

LatUtils.indexOf = function(array, item) {
    for (var i = 0; i < array.length; i++) {
        if (JSON.stringify(array[i]) === JSON.stringify(item)) {
            return i;
        }
    }
    return -1;
};

/**
 * clone and return the cloned version of an object
 * @param obj the object to clone
 * @return cloned version of obj
 */
LatUtils.clone = function(obj) {
    return JSON.parse(JSON.stringify(obj));
};

/**
 * Helper function for custom comparison between elements objects like: {"variant": 1, "time" : 1000}
 * @param a the first element to compare
 * @param b the second element to compare
 */
LatUtils.sortResultOverallTimes = function(a, b) {
    if (a.time < b.time) {
        return -1;
    }
    if (a.time > b.time) {
        return 1;
    }
    return 0;
};


LatUtils.findNewJp = function(oldJp, jpName) {
    var $newJp = Clava.findJp(oldJp);
    if ($newJp === undefined) {
        var extramessage = (jpName === undefined) ? "" : " (" + jpName + ")";
        LatUtils._error("Could not find the provided joinpoint" + extramessage);
    }
    return $newJp;
};

LatUtils.getDate = function() {
    var d = new Date();
    return d.getDate() + "/" +
        (d.getMonth() + 1) + "/" +
        d.getFullYear();
};

LatUtils.getTime = function() {
    var d = new Date();
    return d.getHours() + "h" +
        d.getMinutes() + "m" +
        d.getSeconds() + "s";
};

LatUtils.escapeHtmlCharacters = function(original){
    return Strings.escapeHtml(original);
};

/**
 * @deprecated
 */
LatUtils.resultToCsvOld = function(latResults, outputFolder, delimiter) {
	if(delimiter === undefined) {
		delimiter = ";";
	}


	if(latResults.variants.length === 0) {
		return "";
	}
	
	var csvs = [];
	
	
	// Get one variant, to build objects and headers
	var firstVariant = latResults.variants[0];

	//csv += "variant" + delimiter;
	
	// For each metric, create a CSV
	for(metric of firstVariant.metrics) {
		var csv = {};
		csvs.push(csv);
		
		csv.name = Strings.replacer(metric.name, "[^a-zA-Z0-9]", "_") + "_" + metric.unit; 

		// Add the names of the variant
		csv.contents = firstVariant.nameArray.join(delimiter);
		//csv.contents = "variant";
		
		// Add as many fields as values
		for(var i = 1; i <= metric.values.length; i++) {
			csv.contents += delimiter + "run_" + i;
		}
		
		csv.contents += "\n";
	}
	
	// Each variant is a line in the CSV
	for(var variant of latResults.variants) {

	// Each metric a csv
		for(var i=0; i<variant.metrics.length; i++) {
			var metric = variant.metrics[i];
			
			var csv = csvs[i];
			
			// Add values of variant
			csv.contents += variant.valueArray.join(delimiter);
			//csv.contents += Strings.replacer(variant.id, delimiter, "_");
			
			// Add values
			for(var value of metric.values) {
				csv.contents += delimiter + value;
			}
			
			csv.contents += "\n";
		}
	}
	
	if(outputFolder !== undefined) {
		// Write a csv file for each metric
		for(var csv of csvs) {
			var csvFilename = Io.getPath(outputFolder, csv.name + ".csv");
			println("Writing file '"+ csvFilename.getAbsolutePath() + "'");
			Io.writeFile(csvFilename, csv.contents);
		}
	}
	
	return csvs;
}


LatUtils.resultToCsv = function(latResults, outputFolder, delimiter) {
	if(delimiter === undefined) {
		delimiter = ";";
	}


	if(latResults.variantsVariables.length === 0) {
		return "";
	}
	
	var csvs = [];

	// For each metric, create a CSV
	for(var metricIndex = 0; metricIndex < latResults.metricsResults.length; metricIndex++) {
		metric = latResults.metricsResults[metricIndex];
		
		// Create CSV for the metric
		var csv = {};
		csvs.push(csv);
		csv.name = Strings.replacer(metric.name, "[^a-zA-Z0-9]", "_") + "_" + metric.unit; 

		
		// Build header
		csv.contents = latResults.variantsVariables.map(function(variantVariable){return variantVariable.name;}).join(delimiter);
		// Add as many fields as values
		var numRuns = metric.variantsValues[0].length;
		for(var i = 1; i <= numRuns; i++) {
			csv.contents += delimiter + "run_" + i;
		}
		
		csv.contents += "\n";

		// Each variant represents a line in the csv
		var numVariants = latResults.variantsVariables[0].values.length;
		for(var variantIndex = 0; variantIndex < numVariants; variantIndex++) {
			// Add variant values
			csv.contents += latResults.variantsVariables.map(function(variantVariable){return variantVariable.values[variantIndex];}).join(delimiter);
	
			csv.contents += delimiter;
	
			// Add execution values
			csv.contents += metric.variantsValues[variantIndex].join(delimiter);
			
			// Finish line
			csv.contents += "\n";
		}		
			
	}
	
	if(outputFolder !== undefined) {
		// Write a csv file for each metric
		for(var csv of csvs) {
			var csvFilename = Io.getPath(outputFolder, csv.name + ".csv");
			println("Writing file '"+ csvFilename.getAbsolutePath() + "'");
			Io.writeFile(csvFilename, csv.contents);
		}
	}
	
	return csvs;
}
