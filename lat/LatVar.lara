import lat.LatUtils;
import aspects.variableHelpers;
import lat.templates;
import lara.util.Replacer;

var LatVar = function(name, type) {
    LatUtils.checkString(name, "LatVar*.name");
    this.name = name;
    this.setType(type);
    this.index = -1; /** used to avoid multiple searches, it records the position of this LatVar in an array of LatVars */
    this.first = true; /** the first value getNext returns is always LatConst.LAT_VALUE.DEFAULT*/
    this.vardecl = undefined; /** an array of vardecl joinpoints that will be used internally to hold all the varrefs to this LatVar */
    this.varrefs = []; /** an array of varref joinpoints that will be used internally to hold all the varrefs to this LatVar */
};

LatVar.prototype.equals = function(tester) {
    return this.name === tester.name;
};

LatVar.prototype.getNext = function() {
    LatUtils._error("function getNext not implemented");
};
LatVar.prototype.hasNext = function() {
    LatUtils._error("function hasNext not implemented");
};
LatVar.prototype.countElements = function() {
    LatUtils._error("function countElements not implemented");
};
LatVar.prototype.restart = function() {
    LatUtils._error("function restart not implemented");
};
LatVar.prototype.changeVariantInAst = function($scope, currentValue, conservativeReplacement) {

    if(conservativeReplacement){//replace all reads until the first write
        for(var i = 0; i < this.varrefs.length; i++){
            if(this.varrefs[i].useExpr.use == LatConst.VAR_USES.READ){
                var $temp = this.varrefs[i];
                $temp.replace(currentValue.value);
            }else if(this.varrefs[i].useExpr.use == LatConst.VAR_USES.WRITE || this.varrefs[i].useExpr.use == LatConst.VAR_USES.READWRITE){//detect the first write or readwrite
                break;
            }
        }
    }else{//replace all reads
        for(var i = 0; i < this.varrefs.length; i++){
            if(this.varrefs[i].useExpr.use == LatConst.VAR_USES.READ){
                var $temp = this.varrefs[i];
                $temp.replace(currentValue.value);
            }
        }
    }
    return this;
};
LatVar.prototype.setType = function(type) {
    if (type === LatConst.OUTPUT_TYPE.STRING || type === LatConst.OUTPUT_TYPE.CHAR) {
        this.type = type;
    } else {
        this.type = LatConst.OUTPUT_TYPE.AUTO;
    }
};

/**
 * @returns {boolean} true if this LatVar requires a variable in the given scope to work. By default returns true.
 */
LatVar.prototype.requiresScopeVariable = function() {
	return true;
}

/**
 * New Replacer with the HTML that will be used in the final report.
 *
 * <p> "Tags" that will be automatically replaced if present in the returned Replacer: <br>
 * <ul>
 *   <li>[[varName]]</li>
 *   <li>[[countElements]]</li>
 *   <li>[[varType]]</li>
 * </ul>
 *
 * @returns {lara.util.Replacer} Replacer with the HTML corresponding to this LatVar. Returns a default card if not overriden.
 */
LatVar.prototype.newTemplateCard = function() {
	return new Replacer(templates.getString("default_card.html.template"));
}


LatVar.prototype.getNameArray = function() {
	//println("LatVar internal name:" + this.name);
	//return "hello";
	return [this.name];
}


LatVar.prototype.getValueArray = function(variant) {
	return [variant.value];
}
