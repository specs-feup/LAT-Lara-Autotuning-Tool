var LatVar = function(name, type) {
    LatUtils.checkString(name, "LatVar*.name");
    this.name = name;
    this.setType(type);
    this.index = -1; /** used to avoid multiple searches, it records the position of this LatVar in an array of LatVars */
    this.first = true; /** the first value getNext returns is always LatConst.LAT_VALUE.DEFAULT*/
    this.vardecl = undefined; /** an array of vardecl joinpoints that will be used internally to hold all the varrefs to this LatVar */
    this.varrefs = []; /** an array of varref joinpoints that will be used internally to hold all the varrefs to this LatVar */
};

LatVar.prototype.equals = function(tester) {
    return this.name === tester.name;
};

LatVar.prototype.getNext = function() {
    LatUtils._error("function getNext not implemented");
};
LatVar.prototype.hasNext = function() {
    LatUtils._error("function hasNext not implemented");
};
LatVar.prototype.countElements = function() {
    LatUtils._error("function countElements not implemented");
};
LatVar.prototype.restart = function() {
    LatUtils._error("function restart not implemented");
};
LatVar.prototype.changeVariantInAst = function(currentValue) {
    var readOnly = true;
    for(var i = 0; i < this.varrefs.length; i++){
        if(this.varrefs[i].useExpr.use == LatConst.VAR_USES.WRITE || this.varrefs[i].useExpr.use == LatConst.VAR_USES.READWRITE){
            readOnly = false;
            break;
        }
    }
    if(readOnly){
        LatUtils._warn("only read option in changeVariantInAst is not yet implemented");
        //TODO: basta alterar o vardecl
        //var $temp = this.vardecl;
        //$temp.replace(%{[[currentValue.value]]}%);
    }else{
        //TODO: move the for here after implementing readonly
        println("read only is not yet implemented, but when it is this message should not appear");
    }
    for(var i = 0; i < this.varrefs.length; i++){
        if(this.varrefs[i].use == LatConst.VAR_USES.READ){
            var $temp = this.varrefs[i];
            $temp.replace(%{[[currentValue.value]]}%);
        }
    }
    return this;
};
LatVar.prototype.setType = function(type) {
    if (type === LatConst.OUTPUT_TYPE.STRING || type === LatConst.OUTPUT_TYPE.CHAR) {
        this.type = type;
    } else {
        this.type = LatConst.OUTPUT_TYPE.AUTO;
    }
};