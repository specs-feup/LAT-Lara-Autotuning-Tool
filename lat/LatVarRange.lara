var LatVarRange = function(name, start, stop, step, callback) {
    LatVar.call(this, name);
    LatUtils.checkNumber(start, "start");
    LatUtils.checkNumber(stop, "stop");

    if (step !== undefined) { //step is optional
        LatUtils.checkNumber(step, "step");
    } else {
        step = 1; //default value
    }

    if (step == 0) {
        LatUtils._error("step cannot be equal to zero");
    } else if (step < 0 && start < stop) {
        LatUtils._error("step cannot be negative while start is smaller than stop - causes infinite loop");
    } else if (step > 0 && stop < start) {
        LatUtils._error("step cannot be positive while stop is smaller than start - causes infinite loop");
    }

    if (callback === undefined) { //callback is not defined
        callback = this._defaultCallback;
    }
    this.start = start;
    this.stop = stop;
    this.step = step;
    this.callback = callback;
    this.restart();
};

LatVarRange.prototype = Object.create(LatVar.prototype);
LatVarRange.prototype.constructor = LatVarRange;

//Functions overloaded from LatVar
LatVarRange.prototype.getNext = function() {
    var currentResult = this.callback(this.next);
    this.next += this.step;
    return currentResult;
};
LatVarRange.prototype.hasNext = function() {
    var nextResult = this.next + this.step;
    return (nextResult <= this.stop && this.step > 0) || (nextResult >= this.stop && this.step < 0);
};
LatVarRange.prototype.countElements = function() {
    return Math.abs(this.stop - this.start) / Math.abs(this.step);
};
LatVarRange.prototype.restart = function() {
    this.next = this.start;
};

LatVarRange.prototype._defaultCallback = function(current) {
    return current;
};