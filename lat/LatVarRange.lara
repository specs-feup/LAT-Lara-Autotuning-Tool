import lat.LatVar;
import lat.templates;
import lara.util.Replacer;

var LatVarRange = function(name, start, stop, step, callback, type) {
    LatVar.call(this, name, type);
    LatUtils.checkNumber(start, "start");
    LatUtils.checkNumber(stop, "stop");

    if (step !== undefined) { //step is optional
        LatUtils.checkNumber(step, "step");
    } else {
        step = 1; //default value
    }

    if (step == 0) {
        LatUtils._error("step cannot be equal to zero");
    } else if (step < 0 && start < stop) {
        LatUtils._error("step cannot be negative while start is smaller than stop - causes infinite loop");
    } else if (step > 0 && stop < start) {
        LatUtils._error("step cannot be positive while stop is smaller than start - causes infinite loop");
    }

    if (callback === undefined) { //callback is not defined
        callback = this._defaultCallback;
    }
    this.start = start;
    this.stop = stop;
    this.step = step;
    this.callback = callback;
    this.restart();
};

LatVarRange.prototype = Object.create(LatVar.prototype);
LatVarRange.prototype.constructor = LatVarRange;

//Functions overloaded from LatVar
LatVarRange.prototype.getNext = function() {
    /*
	if (this.first) {
        this.first = false;
        return LatUtils.clone(LatConst.LAT_VALUE.DEFAULT);
    }
	*/
    var currentResult = this.callback(this.next);
    this.next += this.step;
    return { type: this.type, value: currentResult, default: false };
};
LatVarRange.prototype.hasNext = function() {
    var nextResult = this.next + this.step;
    //return this.first || (nextResult <= this.stop && this.step > 0) || (nextResult >= this.stop && this.step < 0);
	return (nextResult <= this.stop && this.step > 0) || (nextResult >= this.stop && this.step < 0);
};
LatVarRange.prototype.countElements = function() {
    return (Math.abs(this.stop - this.start) / Math.abs(this.step)) + 1;
};
LatVarRange.prototype.restart = function() {
    this.next = this.start;
    this.first = true;
};

LatVarRange.prototype._defaultCallback = function(current) {
    return current;
};

LatVarRange.prototype.newTemplateCard = function() {
	var replacerCard = new Replacer(templates.getString("var_range.html.template"));
	
	replacerCard.replaceAll("[[start]]", this.start);
    replacerCard.replaceAll("[[stop]]", this.stop);
    replacerCard.replaceAll("[[step]]", this.step);
		
	return replacerCard;
};
