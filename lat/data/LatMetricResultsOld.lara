import lat.data.LatVariantResult;

/**
 * Represents the exploration results for a single metric for all variants.
 *
 * @param {string} name - Name of the metric
 * @param {string} unit - Unit of the measured values
 * @param {L#lat.data.LatVariantResult[]} variantsValues - An array that will store the variant and execution values for each variant.
 */
var LatMetricResults = function(name, unit, variantsValues) {
	checkString(name, "LatMetricResults:name");
	checkString(unit, "LatMetricResults:unit");
	
	if(variantsValues === undefined) {
		variantsValues = [];
	}

	this.name = name;
	this.unit = unit;
	this.variantsValues = variantsValues;
};

/**
 * @param {Object} variantIndex - The index of the variant.
 * @param {Object} value - The value extracted from a program execution.
 */
LatMetricResults.prototype.addValue = function(variantIndex, value) {
	var latVariantResults = this.getVariantResults(variantIndex);
	latVariantResults.addExecutionValue(value);
}

/**
 * @param {Object} variantIndex - The index of the variant.
 *
 * @return {L#lat.data.LatVariantResults} - The variables and execution values for the specified variant.
 */
LatMetricResults.prototype.getVariantResults = function(variantIndex) {
	var variantValues = this.variantsValues[variantIndex];
	if(variantValues === undefined) {
		throw "No variant results defined for index '" + variantIndex + "'";
//		variantValues = [];
//		this.variantsValues[variantIndex] = variantValues;
	}
	
	return variantValues;
}

/**
 * @param {Object} variantIndex - The index of the variant.
 *
 * @return {boolean} True if exists results for the given index, false otherwise.
 */
LatMetricResults.prototype.hasVariant = function(variantIndex) {
	return this.variantsValues[variantIndex] !== undefined;
}
				