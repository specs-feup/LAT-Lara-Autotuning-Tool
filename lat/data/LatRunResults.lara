/** 
 * Represents the exploration results for all variants and metrics
 *
 * @param {string} name - The name of the exploration run.
 * @param {L#lat.data.LatMetricResults[]} metricsResults - Array with the metrics results.
 * @param {L#lat.data.LatVariantVariable[]} variantsVariables - Array with the variants variables values.
 *
 */
var LatRunResults = function(name, variantsVariables, metricsResults) {
	checkString(name, "LatRunResults::name");
	checkArray(variantsVariables, "LatRunResults::variantsVariables");
	checkArray(metricsResults, "LatRunResults::metricsResults");
	
	this.name = name;
	this.variantsVariables = variantsVariables;
	this.metricsResults = metricsResults;
};


LatRunResults.prototype.getName = function() {
	return this.name = name;
}

LatRunResults.prototype.addMetricResults = function(metricIndex, variantIndex, metricResult) {
	var latMetricResults = this.metricsResults[metricIndex];
	latMetricResults.setOrCheckUnit(metricResult.getUnit());
	latMetricResults.addValue(variantIndex, metricResult.getValue());
}

/**
 * @param {L#lat.data.LatVariantVariable[]}
 */
LatRunResults.prototype.getVariantsVariables = function() {
	return this.variantsVariables;
}

LatRunResults.prototype.getNumVariants = function() {
	return this.variantsVariables.length;
}

LatRunResults.prototype.getVariantVariableValue = function(variableName, variantIndex) {
	for(var variantVariable of this.variantsVariables) {
		if(variantVariable.getName() === variableName) {
			return variantVariable.getValue(variantIndex);
		}
	}

	println("Could not find variable variant with name '"+variableName+"'");

	return undefined;
}

LatRunResults.prototype.getMetricResults = function(metricName) {
	for(var metricResults of this.metricsResults) {
		if(metricResults.getName() === metricName) {
			return metricResults;
		}
	}

	println("Could not find variable variant with name '"+variableName+"'");

	return undefined;
}

/**
 * @param {L#lat.data.LatMetricResults[]}
 */
LatRunResults.prototype.getMetricsResults = function() {
	return this.metricsResults;
}

LatRunResults.prototype.getNumMetrics = function() {
	return this.metricsResults.length;
}
