/** 
 * Represents the exploration results for one variant of one metric
 *
 * @param {Object[]} variableValues - Array with the values used for variables of this variant.
 * @param {Object[]} executionValues - Array with the values extracted after execution.
 *
 */
var LatVariantResults = function(variableValues, executionValues) {
	checkDefined(variableValues, "LatVariantResults::variableValues");
	//checkDefined(executionValues, "LatVariantResults::executionValues");
	if(executionValues === undefined) {
		executionValues = [];
	}
	
	this.variableValues = variableValues;
	this.executionValues = executionValues;
}

/**
 * @return {Object[]} Array with the values used for this variant.
 */
LatVariantResults.prototype.getvariableValues = function() {
	return this.variableValues;
}

/**
 * @return {Object[]} Array with the values extracted after execution.
 */
LatVariantResults.prototype.getExecutionValues = function() {
	return this.executionValues;
}

/**
 * @param {Object} value - Execution value to add.
 */
LatVariantResults.prototype.addExecutionValue = function(value) {
	this.getExecutionValues.push(value);
}


/**
 * @return {number} The number of executed runs for this variant.
 */
LatVariantResults.prototype.getNumRuns = function() {
	return this.executionValues.length();
}

/**
 * @return {number} The number of variables for this variant.
 */
LatVariantResults.prototype.getNumVariables = function() {
	return this.variableValues.length();
}